/**
 * A module for Google OAuth 2.0 authentication middleware using Passport.
 * @module strategies/google
 * @author Abdullaahi Farah
 * @see strategies/* for other Passport.js strategies
 */

const google = require('passport-google-oauth20');
const model = require('../models/users.js');
require('dotenv').config();

/**
 * Function that checks authenticates Google user may add them to database.
 * @param {string} _accessToken - Access token generated by Google
 * @param {string} refresh - Refresh token generated by Google
 * @param {Object} profile - The user's Google account with information
 * @param {Object} done - Passport.js method to implement strategy
 * @returns {function} - A callback function with the authenticated user or null
 */
const checkGoogleAuth = async function checkGoogleAuth(_accessToken, _refreshToken, profile, done) {
	if (!_accessToken || !_refreshToken || !profile) {
		return done(null, false); // user failed to authenticate with Google
	}

	// eslint-disable-next-line no-underscore-dangle
	const token = profile._json;
	let user = {
		username: token.email.split('@')[0],
		password: 'N/A',
		passwordSalt: 'N/A',
		imgURL: token.picture,
		firstName: token.given_name,
		lastName: token.family_name,
		provider: 'google'
	};

	try {
		user = await model.getOrAdd(user, user.provider);
		return done(null, user[0]); // user is authenticated
	} catch (err) {
		return done(null, false); // DB error stopped authentication
	}
};

/**
 * passport-google-oauth20 Options object
 * @type {google.StrategyOptions}
 */
const options = {
	clientID: process.env.GOOGLE_CLIENT_ID,
	clientSecret: process.env.GOOGLE_CLIENT_SECRET,
	callbackURL: `http://localhost:${process.env.PORT}/api/v1/auth/google/callback`
};

module.exports = new google.Strategy(options, checkGoogleAuth);
